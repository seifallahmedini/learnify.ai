// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using learnify.ai.api.Common.Data;

#nullable disable

namespace learnify.ai.api.Common.Data.Migrations
{
    [DbContext(typeof(LearnifyDbContext))]
    partial class LearnifyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("learnify.ai.api.Features.Assessments.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsCorrect")
                        .HasDatabaseName("IX_Answers_IsCorrect");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("IX_Answers_QuestionId");

                    b.HasIndex("QuestionId", "IsCorrect")
                        .HasDatabaseName("IX_Answers_QuestionId_IsCorrect");

                    b.HasIndex("QuestionId", "OrderIndex")
                        .HasDatabaseName("IX_Answers_QuestionId_OrderIndex");

                    b.ToTable("Answers", null, t =>
                        {
                            t.HasCheckConstraint("CK_Answer_OrderIndex", "\"OrderIndex\" >= 0");
                        });
                });

            modelBuilder.Entity("learnify.ai.api.Features.Assessments.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Questions_IsActive");

                    b.HasIndex("QuestionType")
                        .HasDatabaseName("IX_Questions_QuestionType");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("IX_Questions_QuizId");

                    b.HasIndex("QuizId", "IsActive")
                        .HasDatabaseName("IX_Questions_QuizId_IsActive");

                    b.HasIndex("QuizId", "OrderIndex")
                        .HasDatabaseName("IX_Questions_QuizId_OrderIndex");

                    b.ToTable("Questions", null, t =>
                        {
                            t.HasCheckConstraint("CK_Question_OrderIndex", "\"OrderIndex\" >= 0");

                            t.HasCheckConstraint("CK_Question_Points", "\"Points\" > 0");
                        });
                });

            modelBuilder.Entity("learnify.ai.api.Features.Assessments.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("LessonId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("integer");

                    b.Property<int>("PassingScore")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeLimit")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("IX_Quizzes_CourseId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Quizzes_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Quizzes_IsActive");

                    b.HasIndex("LessonId")
                        .HasDatabaseName("IX_Quizzes_LessonId");

                    b.HasIndex("CourseId", "IsActive")
                        .HasDatabaseName("IX_Quizzes_CourseId_IsActive");

                    b.HasIndex("LessonId", "IsActive")
                        .HasDatabaseName("IX_Quizzes_LessonId_IsActive");

                    b.ToTable("Quizzes", null, t =>
                        {
                            t.HasCheckConstraint("CK_Quiz_MaxAttempts", "\"MaxAttempts\" > 0");

                            t.HasCheckConstraint("CK_Quiz_PassingScore", "\"PassingScore\" >= 0 AND \"PassingScore\" <= 100");

                            t.HasCheckConstraint("CK_Quiz_TimeLimit", "\"TimeLimit\" IS NULL OR \"TimeLimit\" > 0");
                        });
                });

            modelBuilder.Entity("learnify.ai.api.Features.Assessments.QuizAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPassed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("MaxScore")
                        .HasColumnType("integer");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TimeSpent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompletedAt")
                        .HasDatabaseName("IX_QuizAttempts_CompletedAt");

                    b.HasIndex("IsPassed")
                        .HasDatabaseName("IX_QuizAttempts_IsPassed");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("IX_QuizAttempts_QuizId");

                    b.HasIndex("StartedAt")
                        .HasDatabaseName("IX_QuizAttempts_StartedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_QuizAttempts_UserId");

                    b.HasIndex("QuizId", "IsPassed")
                        .HasDatabaseName("IX_QuizAttempts_QuizId_IsPassed");

                    b.HasIndex("QuizId", "UserId")
                        .HasDatabaseName("IX_QuizAttempts_QuizId_UserId");

                    b.HasIndex("UserId", "IsPassed")
                        .HasDatabaseName("IX_QuizAttempts_UserId_IsPassed");

                    b.HasIndex("UserId", "StartedAt")
                        .HasDatabaseName("IX_QuizAttempts_UserId_StartedAt");

                    b.ToTable("QuizAttempts", null, t =>
                        {
                            t.HasCheckConstraint("CK_QuizAttempt_MaxScore", "\"MaxScore\" > 0");

                            t.HasCheckConstraint("CK_QuizAttempt_Score", "\"Score\" >= 0");

                            t.HasCheckConstraint("CK_QuizAttempt_TimeSpent", "\"TimeSpent\" >= 0");
                        });
                });

            modelBuilder.Entity("learnify.ai.api.Features.Courses.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Categories_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Categories_Name");

                    b.HasIndex("ParentCategoryId")
                        .HasDatabaseName("IX_Categories_ParentCategoryId");

                    b.HasIndex("ParentCategoryId", "IsActive")
                        .HasDatabaseName("IX_Categories_ParentCategoryId_IsActive");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("learnify.ai.api.Features.Courses.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("DurationHours")
                        .HasColumnType("integer");

                    b.Property<int>("InstructorId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LearningObjectives")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("MaxStudents")
                        .HasColumnType("integer");

                    b.Property<string>("Prerequisites")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VideoPreviewUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("IX_Courses_CategoryId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Courses_CreatedAt");

                    b.HasIndex("InstructorId")
                        .HasDatabaseName("IX_Courses_InstructorId");

                    b.HasIndex("IsFeatured")
                        .HasDatabaseName("IX_Courses_IsFeatured");

                    b.HasIndex("IsPublished")
                        .HasDatabaseName("IX_Courses_IsPublished");

                    b.HasIndex("Level")
                        .HasDatabaseName("IX_Courses_Level");

                    b.HasIndex("Price")
                        .HasDatabaseName("IX_Courses_Price");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Courses_Title");

                    b.HasIndex("CategoryId", "IsPublished")
                        .HasDatabaseName("IX_Courses_CategoryId_IsPublished");

                    b.HasIndex("InstructorId", "IsPublished")
                        .HasDatabaseName("IX_Courses_InstructorId_IsPublished");

                    b.HasIndex("IsFeatured", "IsPublished")
                        .HasDatabaseName("IX_Courses_IsFeatured_IsPublished");

                    b.HasIndex("Level", "IsPublished")
                        .HasDatabaseName("IX_Courses_Level_IsPublished");

                    b.HasIndex("Price", "IsPublished")
                        .HasDatabaseName("IX_Courses_Price_IsPublished");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("learnify.ai.api.Features.Courses.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("IsFree");

                    b.HasIndex("IsPublished");

                    b.HasIndex("CourseId", "IsPublished");

                    b.HasIndex("CourseId", "OrderIndex");

                    b.ToTable("Lessons", null, t =>
                        {
                            t.HasCheckConstraint("CK_Lesson_Duration", "\"Duration\" > 0");

                            t.HasCheckConstraint("CK_Lesson_OrderIndex", "\"OrderIndex\" >= 0");
                        });
                });

            modelBuilder.Entity("learnify.ai.api.Features.Enrollments.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Progress")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("EnrollmentDate");

                    b.HasIndex("PaymentId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "CourseId")
                        .IsUnique()
                        .HasDatabaseName("IX_Enrollments_UserId_CourseId_Unique");

                    b.ToTable("Enrollments", null, t =>
                        {
                            t.HasCheckConstraint("CK_Enrollment_Progress", "\"Progress\" >= 0 AND \"Progress\" <= 100");
                        });
                });

            modelBuilder.Entity("learnify.ai.api.Features.Enrollments.Progress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<int>("TimeSpent")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("IsCompleted");

                    b.HasIndex("LastAccessDate");

                    b.HasIndex("LessonId");

                    b.HasIndex("EnrollmentId", "LessonId")
                        .IsUnique()
                        .HasDatabaseName("IX_Progress_EnrollmentId_LessonId_Unique");

                    b.ToTable("Progress", null, t =>
                        {
                            t.HasCheckConstraint("CK_Progress_TimeSpent", "\"TimeSpent\" >= 0");
                        });
                });

            modelBuilder.Entity("learnify.ai.api.Features.Payments.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("RefundAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("RefundDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("IX_Payments_CourseId");

                    b.HasIndex("PaymentDate")
                        .HasDatabaseName("IX_Payments_PaymentDate");

                    b.HasIndex("PaymentMethod")
                        .HasDatabaseName("IX_Payments_PaymentMethod");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Payments_Status");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasDatabaseName("IX_Payments_TransactionId_Unique");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Payments_UserId");

                    b.HasIndex("CourseId", "Status")
                        .HasDatabaseName("IX_Payments_CourseId_Status");

                    b.HasIndex("UserId", "CourseId")
                        .HasDatabaseName("IX_Payments_UserId_CourseId");

                    b.HasIndex("UserId", "Status")
                        .HasDatabaseName("IX_Payments_UserId_Status");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("learnify.ai.api.Features.Reviews.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("IX_Reviews_CourseId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Reviews_CreatedAt");

                    b.HasIndex("IsApproved")
                        .HasDatabaseName("IX_Reviews_IsApproved");

                    b.HasIndex("Rating")
                        .HasDatabaseName("IX_Reviews_Rating");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Reviews_UserId");

                    b.HasIndex("CourseId", "IsApproved")
                        .HasDatabaseName("IX_Reviews_CourseId_IsApproved");

                    b.HasIndex("CourseId", "Rating")
                        .HasDatabaseName("IX_Reviews_CourseId_Rating");

                    b.HasIndex("UserId", "CourseId")
                        .IsUnique()
                        .HasDatabaseName("IX_Reviews_UserId_CourseId_Unique");

                    b.ToTable("Reviews", null, t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("learnify.ai.api.Features.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Users_CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email_Unique");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Users_IsActive");

                    b.HasIndex("Role")
                        .HasDatabaseName("IX_Users_Role");

                    b.HasIndex("FirstName", "LastName")
                        .HasDatabaseName("IX_Users_FirstName_LastName");

                    b.HasIndex("Role", "IsActive")
                        .HasDatabaseName("IX_Users_Role_IsActive");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("learnify.ai.api.Features.Assessments.Answer", b =>
                {
                    b.HasOne("learnify.ai.api.Features.Assessments.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("learnify.ai.api.Features.Assessments.Question", b =>
                {
                    b.HasOne("learnify.ai.api.Features.Assessments.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("learnify.ai.api.Features.Assessments.Quiz", b =>
                {
                    b.HasOne("learnify.ai.api.Features.Courses.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learnify.ai.api.Features.Courses.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("learnify.ai.api.Features.Assessments.QuizAttempt", b =>
                {
                    b.HasOne("learnify.ai.api.Features.Assessments.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learnify.ai.api.Features.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("learnify.ai.api.Features.Courses.Category", b =>
                {
                    b.HasOne("learnify.ai.api.Features.Courses.Category", null)
                        .WithMany()
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("learnify.ai.api.Features.Courses.Course", b =>
                {
                    b.HasOne("learnify.ai.api.Features.Courses.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("learnify.ai.api.Features.Users.User", null)
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("learnify.ai.api.Features.Courses.Lesson", b =>
                {
                    b.HasOne("learnify.ai.api.Features.Courses.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("learnify.ai.api.Features.Enrollments.Enrollment", b =>
                {
                    b.HasOne("learnify.ai.api.Features.Courses.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learnify.ai.api.Features.Payments.Payment", null)
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("learnify.ai.api.Features.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("learnify.ai.api.Features.Enrollments.Progress", b =>
                {
                    b.HasOne("learnify.ai.api.Features.Enrollments.Enrollment", null)
                        .WithMany()
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learnify.ai.api.Features.Courses.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("learnify.ai.api.Features.Payments.Payment", b =>
                {
                    b.HasOne("learnify.ai.api.Features.Courses.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learnify.ai.api.Features.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("learnify.ai.api.Features.Reviews.Review", b =>
                {
                    b.HasOne("learnify.ai.api.Features.Courses.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("learnify.ai.api.Features.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
