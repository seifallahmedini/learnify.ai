using FluentValidation;
using MediatR;
using learnify.ai.api.Common.Interfaces;
using learnify.ai.api.Features.Users;
using learnify.ai.api.Features.Courses;

namespace learnify.ai.api.Features.Enrollments;

public record GenerateCertificateCommand(
    int EnrollmentId,
    string? CertificateTemplate = null
) : ICommand<CertificateResponse?>;

public class GenerateCertificateValidator : AbstractValidator<GenerateCertificateCommand>
{
    public GenerateCertificateValidator()
    {
        RuleFor(x => x.EnrollmentId)
            .GreaterThan(0)
            .WithMessage("Enrollment ID must be greater than 0");
    }
}

public class GenerateCertificateHandler : IRequestHandler<GenerateCertificateCommand, CertificateResponse?>
{
    private readonly IEnrollmentRepository _enrollmentRepository;
    private readonly IUserRepository _userRepository;
    private readonly ICourseRepository _courseRepository;

    public GenerateCertificateHandler(
        IEnrollmentRepository enrollmentRepository,
        IUserRepository userRepository,
        ICourseRepository courseRepository)
    {
        _enrollmentRepository = enrollmentRepository;
        _userRepository = userRepository;
        _courseRepository = courseRepository;
    }

    public async Task<CertificateResponse?> Handle(GenerateCertificateCommand request, CancellationToken cancellationToken)
    {
        var enrollment = await _enrollmentRepository.GetByIdAsync(request.EnrollmentId, cancellationToken);
        if (enrollment == null)
            return null;

        // Check if enrollment is completed
        if (!enrollment.IsCompleted())
            throw new InvalidOperationException("Certificate can only be generated for completed enrollments");

        // Load user and course data
        var user = await _userRepository.GetByIdAsync(enrollment.UserId, cancellationToken);
        var course = await _courseRepository.GetByIdAsync(enrollment.CourseId, cancellationToken);
        var instructor = course != null ? await _userRepository.GetByIdAsync(course.InstructorId, cancellationToken) : null;

        if (user == null || course == null)
            throw new ArgumentException("Invalid enrollment data for certificate generation");

        // Generate certificate (placeholder implementation)
        var certificateId = $"CERT-{enrollment.Id}-{DateTime.UtcNow:yyyyMMdd}";
        var certificateUrl = $"/certificates/{certificateId}.pdf"; // This would be generated by a certificate service

        return new CertificateResponse(
            enrollment.Id,
            certificateId,
            certificateUrl,
            DateTime.UtcNow,
            user.GetFullName(),
            course.Title,
            instructor?.GetFullName() ?? "Unknown Instructor",
            enrollment.CompletionDate ?? DateTime.UtcNow,
            enrollment.Progress
        );
    }
}